# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:40:51+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, APIKeyQuery, BaseSecurity

from models import (
    FieldFormatRotoBallerPremiumNewsByDateDateGetResponse,
    FieldFormatRotoBallerPremiumNewsByPlayerIDPlayeridGetResponse,
    FieldFormatRotoBallerPremiumNewsGetResponse,
    Format,
)

app = MCPProxy(
    contact={'x-twitter': 'nfldata'},
    title='NBA v3 RotoBaller Premium News',
    version='1.0',
    servers=[
        {'url': 'http://azure-api.sportsdata.io/v3/nba/news-rotoballer'},
        {'url': 'https://azure-api.sportsdata.io/v3/nba/news-rotoballer'},
    ],
)


@app.get(
    '/{format}/RotoBallerPremiumNews',
    tags=['premium_news_retrieval'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def premium_news(format: Format = 'xml'):
    """
    Premium News
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/RotoBallerPremiumNewsByDate/{date}',
    tags=['premium_news_retrieval'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def premium_news_by_date(format: Format = 'xml', date: str = ...):
    """
    Premium News by Date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{format}/RotoBallerPremiumNewsByPlayerID/{playerid}',
    tags=['premium_news_retrieval'],
    security=[
        APIKeyHeader(name="Ocp-Apim-Subscription-Key"),
        APIKeyQuery(name="key"),
    ],
)
def premium_news_by_player(format: Format = 'xml', playerid: str = ...):
    """
    Premium News by Player
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
